#+title: Conventional Commits

The conventional commits specification is a lightweight convention on top of commit messages.

* Why?

- Provides an easy set of rules for creating an explicit commit history.
- Devetails with SemVer, by describling the features, fixes, and breaking changes.

* How?

#+BEGIN_SRC git
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
#+END_SRC

- ~fix~ a commit of the type ~fix~ patches a bug in your codebase. (correlates with ~PATCH~ in SemVer)

- ~feat~ a commit of the type ~feat~ introduces a new feature to the codebase. (correlates with ~MINOR~ in SemVer)

- =types= other than ~fix:~ and ~feat:~ are allowed, for example: ~build:~, ~chore:~, ~ci:~, ~docs:~, ~style:~, ~refactor:~, ~perf:~, ~test:~.

- ~BREAKING CHANGE~ a commit that has a footer ~BREAKING CHANGE:~, or appends a ~!~ after the type/scope, introduces a breaking API changes (correlates with ~MAJOR~ in SemVer). A ~BREAKING CHANGE~ can be part of commits of any type.

- =footers= other than ~BREAKING CHANGE: <description>~ may be provided and follow a convention similar to [[https://git-scm.com/docs/git-interpret-trailers][git trailer format]].

- A ~scope~ may be provided to a commit's type, to provide additional contextual information, and is contained within parenthesis, e.g., ~feat(parser): add ability to parse arrays~.

* Examples

#+BEGIN_SRC bash
feat: allow provided config object to extend other configs

BREAKING CHANGE: `extends` key in config file is now used for extending other config files.
#+END_SRC

#+BEGIN_SRC bash
refactor!: drop support for Node 6

BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.
#+END_SRC

#+BEGIN_SRC bash
feat(lang): add polish language
#+END_SRC

#+BEGIN_SRC bash
fix: correct minor typos in code

see the issue for details on typos fixed.

Reviewed-by: Z
Refs #133
#+END_SRC
